// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Utils$Aoc2018 = require("./Utils.bs.js");

var day1Input = "src/day1-input.txt";

function parseFrequencies(frequencies) {
  return List.map(Caml_format.caml_int_of_string, frequencies);
}

function sumFrequencies(frequencies) {
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, frequencies);
}

function solve1(param) {
  var frequencies = Utils$Aoc2018.inputFileToList(day1Input);
  return sumFrequencies(List.map(Caml_format.caml_int_of_string, frequencies));
}

function findFirstDuplicateSum(_$staropt$star, _$staropt$star$1, _$staropt$star$2, list) {
  while(true) {
    var $staropt$star = _$staropt$star$2;
    var $staropt$star$1 = _$staropt$star$1;
    var $staropt$star$2 = _$staropt$star;
    var sums = $staropt$star$2 !== undefined ? Caml_option.valFromOption($staropt$star$2) : Utils$Aoc2018.IntSet[/* empty */0];
    var lastSum = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
    var remaining = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    if (remaining) {
      var nextSum = lastSum + remaining[0] | 0;
      var match = Curry._2(Utils$Aoc2018.IntSet[/* mem */2], nextSum, sums);
      if (match) {
        return nextSum;
      } else {
        _$staropt$star$2 = remaining[1];
        _$staropt$star$1 = nextSum;
        _$staropt$star = Caml_option.some(Curry._2(Utils$Aoc2018.IntSet[/* add */3], nextSum, sums));
        continue ;
      }
    } else {
      _$staropt$star$2 = list;
      _$staropt$star$1 = lastSum;
      _$staropt$star = Caml_option.some(sums);
      continue ;
    }
  };
}

function solve2(param) {
  var frequencies = Utils$Aoc2018.inputFileToList(day1Input);
  return findFirstDuplicateSum(undefined, undefined, undefined, List.map(Caml_format.caml_int_of_string, frequencies));
}

exports.day1Input = day1Input;
exports.parseFrequencies = parseFrequencies;
exports.sumFrequencies = sumFrequencies;
exports.solve1 = solve1;
exports.findFirstDuplicateSum = findFirstDuplicateSum;
exports.solve2 = solve2;
/* Utils-Aoc2018 Not a pure module */
