// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Utils$Aoc2018 = require("./Utils.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var inputFile = "src/day2-input.txt";

function hasAnyLetterExactly(n, str) {
  var asList = Utils$Aoc2018.stringToCharList(str);
  var _countMap = Utils$Aoc2018.CharMap[/* empty */0];
  var _remaining = asList;
  while(true) {
    var remaining = _remaining;
    var countMap = _countMap;
    if (remaining) {
      var head = remaining[0];
      var currentCount;
      try {
        currentCount = Curry._2(Utils$Aoc2018.CharMap[/* find */21], head, countMap);
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          currentCount = 0;
        } else {
          throw exn;
        }
      }
      _remaining = remaining[1];
      _countMap = Curry._3(Utils$Aoc2018.CharMap[/* add */3], head, currentCount + 1 | 0, countMap);
      continue ;
    } else {
      return Curry._2(Utils$Aoc2018.CharMap[/* exists */12], (function (param, count) {
                    return count === n;
                  }), countMap);
    }
  };
}

function numberOfIdsMatching(n, ids) {
  var getScore = function (id) {
    var match = hasAnyLetterExactly(n, id);
    if (match) {
      return 1;
    } else {
      return 0;
    }
  };
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, List.map(getScore, ids));
}

function calculateChecksum(ids) {
  return Caml_int32.imul(numberOfIdsMatching(2, ids), numberOfIdsMatching(3, ids));
}

function solve(param) {
  return calculateChecksum(Utils$Aoc2018.inputFileToList(inputFile));
}

exports.inputFile = inputFile;
exports.hasAnyLetterExactly = hasAnyLetterExactly;
exports.numberOfIdsMatching = numberOfIdsMatching;
exports.calculateChecksum = calculateChecksum;
exports.solve = solve;
/* Utils-Aoc2018 Not a pure module */
